function states = startup
%% MascotMayhem.m
% Group 10

% This function is called upon startup of GameTool.m. It initializes the
% positions and properties (still needs to be programmed) of each encounter
% on the 50x50 gameboard and the stats of the player. All of this
% information is stored in the structured variable called 'states', and
% states is passed to the GameTool GUI program. 

% For a better picture of how states contains the other variables, notice
% how in the first few lines of code below, we create a structured variable
% called 'player'. That variable is a structured variable within a
% structured variable (player is within states). This works the same way
% that handles does. We did this so that we could pass all of this
% information in this function to GameTool.m very easily just by containing
% it all in one variable, 'states'.


rng('shuffle')

%% Initialization of starting game state

states.worldArray = zeros(50); % Initialization of open world
states.encounterArray = zeros(12); % Initialization of encounter board

states.player.pos = [1,1]; % Player's position in the open world
states.player.encounterPos = [12,1]; % Player's position in first encounter
states.player.health = 100; % Not necessarily a percentage
states.player.accuracy = 75; % Percentage of maximum hit that is the lower bound
% for each hit. Ex: A player with strength 20 and accuracy 75 will hit with
% a random number between 15 and 20 each time before defense is factored in
states.player.strength = 10; % Maximum hit the player can deal
states.player.defense = 20; % Percentage of opponent's hits that is mitigated
states.player.speed = 2; % Number of tiles moved per turn; slow, normal, fast, heck-a fast
states.player.critChance = 10; % Percent chance of dealing double damage
states.player.range = 1; % Number of tiles a player can reach with an attack
states.player.strategy = 'passive';
states.inEncounter = false; % Whether the player is in an encounter

% Placement of encounters on open world map
states.marsRover.pos = [randi(10) + 40, randi(10) + 40]; % Rover is placed near
% the lower right-hand corner of the map
encountersPlaced = 1; % Number of encounters that have been placed so far
states.positions = {states.marsRover.pos}; % Sets the first element of a cell array equal
% to the position vector of the Mars Rover

% This loop 
while encountersPlaced < 10
    encountersPlaced = encountersPlaced + 1;
    rowPos = randi(50);
    colPos = randi(50);
    
    % This loop makes sure that no two encounters are within three squares
    % of each other
    for i=1:encountersPlaced-1
        if abs(rowPos-states.positions{i}(1)) <= 3 && abs(colPos-states.positions{i}(2)) <=3
            encountersPlaced = encountersPlaced - 1;
        else
            states.positions{encountersPlaced} = [rowPos,colPos];
        end
    end
    
end

states.encounter2.pos = states.positions{2};
states.encounter3.pos = states.positions{3};
states.encounter4.pos = states.positions{4};
states.encounter5.pos = states.positions{5};
states.encounter6.pos = states.positions{6};
states.encounter7.pos = states.positions{7};
states.encounter8.pos = states.positions{8};
states.encounter9.pos = states.positions{9};
states.encounter10.pos = states.positions{10};